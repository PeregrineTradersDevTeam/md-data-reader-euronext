from test_util import build_parquet_data, verify_datasets
import sys

official_application = sys.argv[1]
official_files_location = sys.argv[2]

cmdline_params = ["-p",
    "ContractStandingData-for-test",
     "-o",
     "1013",
     official_files_location + "/20190104//020000/224.0.65.190_11190.pcap.gz",
     official_files_location + "/20190104//020000/224.0.64.190_11190.pcap.gz",
     official_files_location + "/20190104//020000/224.0.65.210_11210.pcap.gz",
     official_files_location + "/20190104//020000/224.0.64.200_11200.pcap.gz"]

print("Building ContractStandingData")
build_parquet_data(official_application, cmdline_params)

print("Checking ContractStandingData")
verify_datasets(official_files_location + "/Official-ContractStandingData", "ContractStandingData-for-test-contract-standing-data.parquet", {
    "MDSeqNum": "mkt_data_seq_num",
    "RebroadcastIndicator": "rebroadcast_ind",
    "SymbolIndex": "symbol_index",
    "OptiqSegment": "optiq_segment",
    "PartitionID": "partition_id",
    "ContractEventDate": "contract_event_date",
    "ExchangeCode": "exchange_code",
    "ExerStyle": "exercise_style",
    "FlexInd": "flex_indicator",
    "ContractName": "contract_name",
    "ContractType": "contract_type",
    "UnderlyingType": "underlying_type",
    "PriceDecimals": "price_index_level_decimals",
    "QuantityDecimals": "quantity_decimals",
    "AmountDecimals": "amount_decimals",
    "RatioDecimals": "ratio_multiplier_decimals",
    "MainDepositary": "main_depositary",
    "MIC": "MIC",
    "CountryOfExchange": "country_of_exchange",
    "ProductCode": "product_code",
    "UnderlyingMIC": "underlying_MIC",
    "UnderlyingISINCode": "underlying_isin_code",
    "UnderlyingExpiry": "underlying_expiry",
    "OrderTypeRules": "order_type_rules",
    "SettlementMethod": "settlement_method",
    "TradingCurrency": "trading_currency",
    "WhRFCDaysBeforeExpiry": "whrfc_days_before_expiry" ,
    "WhRFCMinutesBeforeClosing": "whrfc_minutes_before_closing",
    "MinimumQuantityForInitiator": "min_quantity_for_initiator",
    "MinimumQuantityForReactor": "min_quantity_for_reactor",
    "WhRFCPickUpPerc": "whrfc_pick_up_perc",
    "WhRFCImprovementPeriod": "whrfc_improvement_period",
    "AvailableWholesaleTradeType": "available_wholesale_trade_type",
    "InstrumentDecimalsRatio": "instrument_decimals_ratio",
    "InstrumentTickSize": "instrument_tick_size",
    "InstrumentSettlementTickSize": "instrument_settlement_tick_size",
    "InstrumentEDSPTickSize": "instrument_edsp_tick_size",
    "StrikePriceDecimalsRatio": "strike_price_decimals_ratio",
    "DeltaProtectforMM": "delta_protect_for_mm",
    "VegaProtectforMM": "vega_protect_for_mm",
    "VolumeProtectforMM": "volume_protect_for_mm",
    "ContractTradingType": "contract_trading_type",
    "ThrottleforIncomingOrders": "throttle_for_incoming_orders",
    "StrikePriceFlexIncrement": "strike_price_flex_increment",
    "PremiumPricingTickSize": "premium_pricing_tick_size",
    "PremiumPricingThreshold": "premium_pricing_threshold",
    "TickValue": "tick_value",
    "OutrightLISTradeThreshold": "outright_lis_trade_threshold" ,
    "StrategyLISTradeThreshold": "strategy_lis_trade_threshold",
    "OutrightGCrossTradeThreshold": "outright_gcross_threshold",
    "StrategyGCrossTradeThreshold": "strategy_gcross_threshold",
    "LotSize": "lot_size",
    "InstUnitExp": "intrument_unit_expression",
    "TickValueDecimals": "tick_value_decimals",
    "PricingAlgorithm": "pricing_algorithm",
    "UnderlyingSubtype": "underlying_subtype",
    "MotherStockISIN": "mother_stock_isin",
    "ReferenceFutureContractSecGrp": "reference_future_contract_secgrp",
    "StrategyCode": "strategy_code"})
